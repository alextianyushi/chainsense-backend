"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSubscriptionInfo = exports.getPendingCredits = exports.downloadFile = exports.uploadFileWithinFolderUpload = exports.uploadFolderFromInput = exports.uploadObjectAsJSON = exports.uploadFile = exports.uploadFileFromInput = void 0;
const mime_types_1 = __importDefault(require("mime-types"));
const async_1 = require("../utils/async");
const misc_1 = require("../utils/misc");
const index_1 = require("./calls/index");
const folderTree_1 = require("./models/folderTree");
const UPLOAD_FILE_CHUNK_SIZE = 1024 * 1024;
const uploadFileChunks = (api, fileUploadId, asyncIterable, uploadChunkSize = UPLOAD_FILE_CHUNK_SIZE, onProgress) => {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, e_1, _b, _c;
        try {
            let index = 0;
            let uploadBytes = 0;
            try {
                for (var _d = true, _e = __asyncValues((0, async_1.asyncByChunk)(asyncIterable, uploadChunkSize)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const chunk = _c;
                    yield index_1.apiCalls.uploadFileChunk(api, { uploadId: fileUploadId, chunk, index });
                    uploadBytes += chunk.length;
                    onProgress === null || onProgress === void 0 ? void 0 : onProgress(uploadBytes);
                    index++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            resolve();
        }
        catch (e) {
            reject(e);
        }
    }));
};
/**
 * Uploads a file to the server with optional encryption and compression.
 *
 * This function reads a file from the provided input, optionally encrypts it
 * using the specified password, and compresses it using the specified algorithm if requested.
 * It uploads the file in chunks to the server, creating an upload session and
 * completing it once all chunks have been successfully uploaded.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {File} file - The file to be uploaded.
 * @param {UploadFileOptions} options - Options for the upload process.
 * @param {string} [options.password] - The password for encryption (optional).
 * @param {boolean} [options.compression=true] - Whether to compress the file (optional).
 * @param {number} [uploadChunkSize] - The size of each chunk to upload (optional).
 * @returns {PromisedObservable<UploadFileStatus>} - An observable that emits the upload status.
 * @throws {Error} - Throws an error if the upload fails at any stage.
 */
const uploadFileFromInput = (api, file, options = {}, uploadChunkSize) => {
    const { password = undefined, compression = true } = options;
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        const { compressFile, CompressionAlgorithm, encryptFile, EncryptionAlgorithm } = yield import('@autonomys/auto-dag-data');
        let asyncIterable = (0, async_1.fileToIterable)(file);
        if (compression) {
            asyncIterable = compressFile(asyncIterable, {
                level: 9,
                algorithm: CompressionAlgorithm.ZLIB,
            });
        }
        if (password) {
            asyncIterable = encryptFile(asyncIterable, password, {
                algorithm: EncryptionAlgorithm.AES_256_GCM,
            });
        }
        const uploadOptions = {
            compression: compression
                ? {
                    level: 9,
                    algorithm: CompressionAlgorithm.ZLIB,
                }
                : undefined,
            encryption: password
                ? {
                    algorithm: EncryptionAlgorithm.AES_256_GCM,
                }
                : undefined,
        };
        const fileUpload = yield index_1.apiCalls.createFileUpload(api, {
            mimeType: mime_types_1.default.lookup(file.name) || undefined,
            filename: file.name,
            uploadOptions,
        });
        yield uploadFileChunks(api, fileUpload.id, asyncIterable, uploadChunkSize, (bytes) => {
            var _a;
            (_a = options.onProgress) === null || _a === void 0 ? void 0 : _a.call(options, (0, misc_1.progressToPercentage)(bytes, file.size));
        });
        const result = yield index_1.apiCalls.completeUpload(api, { uploadId: fileUpload.id });
        resolve(result.cid);
    }));
};
exports.uploadFileFromInput = uploadFileFromInput;
/**
 * Uploads a file to the server with optional encryption and compression.
 *
 * This function reads a file from the provided input, optionally encrypts it
 * using the specified password, and compresses it using the specified algorithm if requested.
 * It uploads the file in chunks to the server, creating an upload session and
 * completing it once all chunks have been successfully uploaded.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {File | GenericFile} file - The file to be uploaded, which can be a File or a GenericFile.
 * @param {UploadFileOptions} options - Options for the upload process.
 * @param {string} [options.password] - The password for encryption (optional).
 * @param {boolean} [options.compression=true] - Whether to compress the file (optional).
 * @param {number} [uploadChunkSize] - The size of each chunk to upload (optional).
 * @returns {Promise<string>} - The CID of the uploaded file.
 * @throws {Error} - Throws an error if the upload fails at any stage.
 */
const uploadFile = (api_1, file_1, ...args_1) => __awaiter(void 0, [api_1, file_1, ...args_1], void 0, function* (api, file, options = {}, uploadChunkSize) {
    const { password = undefined, compression = true } = options;
    const { compressFile, CompressionAlgorithm, encryptFile, EncryptionAlgorithm } = yield import('@autonomys/auto-dag-data');
    let asyncIterable = file.read();
    if (compression) {
        asyncIterable = compressFile(asyncIterable, {
            level: 9,
            algorithm: CompressionAlgorithm.ZLIB,
        });
    }
    if (password) {
        asyncIterable = encryptFile(asyncIterable, password, {
            algorithm: EncryptionAlgorithm.AES_256_GCM,
        });
    }
    const uploadOptions = {
        compression: compression
            ? {
                level: 9,
                algorithm: CompressionAlgorithm.ZLIB,
            }
            : undefined,
        encryption: password
            ? {
                algorithm: EncryptionAlgorithm.AES_256_GCM,
            }
            : undefined,
    };
    const fileUpload = yield index_1.apiCalls.createFileUpload(api, {
        mimeType: mime_types_1.default.lookup(file.name) || undefined,
        filename: file.name,
        uploadOptions,
    });
    yield uploadFileChunks(api, fileUpload.id, asyncIterable, uploadChunkSize, (bytes) => {
        var _a;
        (_a = options.onProgress) === null || _a === void 0 ? void 0 : _a.call(options, (0, misc_1.progressToPercentage)(bytes, file.size));
    });
    const result = yield index_1.apiCalls.completeUpload(api, { uploadId: fileUpload.id });
    return result.cid;
});
exports.uploadFile = uploadFile;
/**
 * Uploads an object as a JSON file to the server.
 *
 * This function serializes the provided object to a JSON string,
 * and then uploads the JSON string as a file to the server.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {File | GenericFile} file - The file to be uploaded, which can be a File or a GenericFile.
 * @param {UploadFileOptions} options - Options for the upload process.
 * @param {string} [options.password] - The password for encryption (optional).
 * @param {boolean} [options.compression=true] - Whether to compress the file (optional).
 * @param {number} [uploadChunkSize] - The size of each chunk to upload (optional).
 * @returns {Promise<string>} - The CID of the uploaded file.
 * @throws {Error} - Throws an error if the upload fails at any stage.
 */
const uploadObjectAsJSON = (api_1, object_1, name_1, ...args_1) => __awaiter(void 0, [api_1, object_1, name_1, ...args_1], void 0, function* (api, object, name, options = {}, uploadChunkSize) {
    try {
        const json = Buffer.from(JSON.stringify(object));
        return (0, exports.uploadFile)(api, {
            read: () => (0, async_1.bufferToIterable)(json),
            name: name || 'object.json',
            mimeType: 'application/json',
            size: json.length,
        }, options, uploadChunkSize);
    }
    catch (e) {
        throw new Error('Failed to serialize object to JSON');
    }
});
exports.uploadObjectAsJSON = uploadObjectAsJSON;
/**
 * Uploads an entire folder to the server.
 *
 * This function retrieves all files within the specified folder,
 * constructs a file tree representation, and initiates the upload
 * process. It also handles optional compression of the files during
 * the upload. If a password is provided, the files will be zipped
 * before uploading.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {FileList | File[]} fileList - The list of files to be uploaded.
 * @param {Object} options - Options for the upload process.
 * @param {number} [options.uploadChunkSize] - The size of each chunk to upload (optional).
 * @param {string} [options.password] - The password for encryption (optional).
 * @returns {PromisedObservable<UploadFileStatus | UploadFolderStatus>} - An observable that emits the upload status.
 * @throws {Error} - Throws an error if the upload fails at any stage.
 */
const uploadFolderFromInput = (api_1, fileList_1, ...args_1) => __awaiter(void 0, [api_1, fileList_1, ...args_1], void 0, function* (api, fileList, { uploadChunkSize, password, onProgress, } = {}) {
    const files = fileList instanceof FileList ? Array.from(fileList) : fileList;
    const fileTree = (0, folderTree_1.constructFromInput)(files);
    // If password is provided, we zip the files and upload the zip file
    if (password) {
        const filesMap = Object.fromEntries(files.map((file) => [file.webkitRelativePath, file]));
        const zipBlob = yield (0, folderTree_1.constructZipBlobFromTreeAndPaths)(fileTree, filesMap);
        const name = fileList[0].webkitRelativePath.split('/').filter(Boolean)[0];
        return (0, exports.uploadFile)(api, {
            read: () => (0, async_1.fileToIterable)(zipBlob),
            name: `${name}.zip`,
            mimeType: 'application/zip',
            size: zipBlob.size,
        }, {
            password,
            compression: true,
            onProgress,
        });
    }
    // Otherwise, we upload the files as a folder w/o compression or encryption
    const folderUpload = yield index_1.apiCalls.createFolderUpload(api, {
        fileTree,
    });
    let currentBytesUploaded = 0;
    const totalSize = files.reduce((acc, file) => acc + file.size, 0);
    for (const file of files) {
        yield (0, exports.uploadFileWithinFolderUpload)(api, folderUpload.id, {
            read: () => (0, async_1.fileToIterable)(file),
            name: file.name,
            mimeType: mime_types_1.default.lookup(file.name) || undefined,
            size: file.size,
            path: file.webkitRelativePath,
        }, uploadChunkSize, {
            onProgress: (progress) => {
                onProgress === null || onProgress === void 0 ? void 0 : onProgress((0, misc_1.progressToPercentage)(currentBytesUploaded + progress, totalSize));
            },
        });
        currentBytesUploaded += file.size;
    }
    const result = yield index_1.apiCalls.completeUpload(api, { uploadId: folderUpload.id });
    return result.cid;
});
exports.uploadFolderFromInput = uploadFolderFromInput;
/**
 * Uploads a file within an existing folder upload session.
 *
 * @param {AutoDriveApi} api - The API instance to interact with the AutoDrive service.
 * @param {string} uploadId - The ID of the folder upload session to which the file will be added.
 * @param {string} filepath - The path of the file to be uploaded.
 *
 * @returns {Promise<void>} A promise that resolves when the file upload is complete.
 */
const uploadFileWithinFolderUpload = (api_1, uploadId_1, file_1, uploadChunkSize_1, ...args_1) => __awaiter(void 0, [api_1, uploadId_1, file_1, uploadChunkSize_1, ...args_1], void 0, function* (api, uploadId, file, uploadChunkSize, options = {}) {
    const fileUpload = yield index_1.apiCalls.createFileUploadWithinFolderUpload(api, {
        uploadId,
        name: file.name,
        mimeType: file.mimeType,
        relativeId: file.path,
        uploadOptions: {},
    });
    yield uploadFileChunks(api, fileUpload.id, file.read(), uploadChunkSize, options.onProgress);
    const result = yield index_1.apiCalls.completeUpload(api, { uploadId: fileUpload.id });
    return result.cid;
});
exports.uploadFileWithinFolderUpload = uploadFileWithinFolderUpload;
/**
 * Downloads a file from the AutoDrive service.
 *
 * @param {AutoDriveApi} api - The API instance to interact with the AutoDrive service.
 * @param {string} cid - The CID of the file to be downloaded.
 * @returns {Promise<ReadableStream<Uint8Array>>} A promise that resolves to a ReadableStream of the downloaded file.
 */
const downloadFile = (api, cid, password) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const { decompressFile, CompressionAlgorithm, EncryptionAlgorithm, decryptFile } = yield import('@autonomys/auto-dag-data');
    const metadata = yield index_1.apiCalls.getObjectMetadata(api, { cid });
    let iterable = (0, async_1.asyncFromStream)(yield index_1.apiCalls.downloadObject(api, { cid }));
    if ((_a = metadata.uploadOptions) === null || _a === void 0 ? void 0 : _a.encryption) {
        if (!password) {
            throw new Error('Password is required to decrypt the file');
        }
        iterable = decryptFile(iterable, password, {
            algorithm: EncryptionAlgorithm.AES_256_GCM,
        });
    }
    if ((_b = metadata.uploadOptions) === null || _b === void 0 ? void 0 : _b.compression) {
        iterable = decompressFile(iterable, {
            algorithm: CompressionAlgorithm.ZLIB,
        });
    }
    return iterable;
});
exports.downloadFile = downloadFile;
const getPendingCredits = (api) => __awaiter(void 0, void 0, void 0, function* () {
    const me = yield index_1.apiCalls.getMe(api);
    return {
        upload: me.subscription.pendingUploadCredits,
        download: me.subscription.pendingDownloadCredits,
    };
});
exports.getPendingCredits = getPendingCredits;
const getSubscriptionInfo = (api) => __awaiter(void 0, void 0, void 0, function* () {
    const me = yield index_1.apiCalls.getMe(api);
    return me.subscription;
});
exports.getSubscriptionInfo = getSubscriptionInfo;
