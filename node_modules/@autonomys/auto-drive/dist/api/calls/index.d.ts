export declare const apiCalls: {
    shareObject: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
        publicId: string;
    }>) => Promise<any>;
    markObjectAsDeleted: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<void>;
    restoreObject: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<void>;
    createFileUpload: (api: import("..").AutoDriveApi, { mimeType, filename, uploadOptions, }: import("../../utils").ArgsWithoutPagination<{
        mimeType?: string;
        filename: string;
        uploadOptions: import("..").FileUploadOptions | null;
    }>) => Promise<import("..").FileUpload>;
    createFolderUpload: (api: import("..").AutoDriveApi, { fileTree, uploadOptions, }: import("../../utils").ArgsWithoutPagination<{
        fileTree: import("../models/folderTree").FolderTree;
        uploadOptions?: import("..").FileUploadOptions;
    }>) => Promise<import("..").FolderUpload>;
    createFileUploadWithinFolderUpload: (api: import("..").AutoDriveApi, { uploadId, name, mimeType, relativeId, uploadOptions, }: import("../../utils").ArgsWithoutPagination<{
        uploadId: string;
        name: string;
        mimeType?: string;
        relativeId: string;
        uploadOptions: import("..").FileUploadOptions;
    }>) => Promise<import("..").FileUpload>;
    uploadFileChunk: (api: import("..").AutoDriveApi, { uploadId, chunk, index, }: import("../../utils").ArgsWithoutPagination<{
        uploadId: string;
        chunk: Buffer;
        index: number;
    }>) => Promise<void>;
    completeUpload: (api: import("..").AutoDriveApi, { uploadId }: import("../../utils").ArgsWithoutPagination<{
        uploadId: string;
    }>) => Promise<import("..").CompleteUploadResponse>;
    getRoots: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithPagination<{
        scope: import("..").Scope;
    }>) => Promise<import("../models/common").PaginatedResult<import("..").ObjectSummary>>;
    getSharedWithMe: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithPagination) => Promise<import("../models/common").PaginatedResult<import("..").ObjectSummary>>;
    getDeleted: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithPagination) => Promise<import("../models/common").PaginatedResult<import("..").ObjectSummary>>;
    getObject: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<import("..").ObjectInformation>;
    getObjectUploadStatus: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<import("..").ObjectInformation["uploadStatus"]>;
    getObjectOwners: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<import("..").ObjectInformation["owners"]>;
    getObjectMetadata: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<import("..").ObjectInformation["metadata"]>;
    getMe: (api: import("..").AutoDriveApi) => Promise<import("../models/user").UserInfo>;
    downloadObject: (api: import("..").AutoDriveApi, query: import("../../utils").ArgsWithoutPagination<{
        cid: string;
    }>) => Promise<ReadableStream<Uint8Array>>;
};
//# sourceMappingURL=index.d.ts.map