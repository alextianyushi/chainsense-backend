"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMe = exports.getObjectMetadata = exports.getObjectOwners = exports.getObjectUploadStatus = exports.getObject = exports.getDeleted = exports.getSharedWithMe = exports.getRoots = void 0;
/**
 * Retrieves the root objects based on the specified scope.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithPagination<{ scope: Scope }>} query - The query parameters including scope, limit, and offset.
 * @returns {Promise<ObjectSummary[]>} - A promise that resolves to an array of ObjectSummary representing the root objects.
 * @throws {Error} - Throws an error if the request fails.
 */
const getRoots = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/roots?scope=${query.scope}&limit=${query.limit}&offset=${query.offset}`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get roots: ${response.statusText}`);
    }
    return response.json();
});
exports.getRoots = getRoots;
/**
 * Retrieves the objects that have been shared with the authenticated user.
 *
 * This method sends a request to the server to fetch a list of objects
 * that are shared with the user, based on the specified pagination parameters.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithPagination} query - The query parameters including limit and offset for pagination.
 * @returns {Promise<ObjectSummary[]>} - A promise that resolves to an array of ObjectSummary representing the shared objects.
 * @throws {Error} - Throws an error if the request fails.
 */
const getSharedWithMe = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/roots/shared?limit=${query.limit}&offset=${query.offset}`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get shared with me: ${response.statusText}`);
    }
    return response.json();
});
exports.getSharedWithMe = getSharedWithMe;
/**
 * Retrieves the objects that have been marked as deleted.
 *
 * This method sends a request to the server to fetch a list of objects
 * that have been deleted, based on the specified pagination parameters.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithPagination} query - The query parameters including limit and offset for pagination.
 * @returns {Promise<ObjectSummary[]>} - A promise that resolves to an array of ObjectSummary representing the deleted objects.
 * @throws {Error} - Throws an error if the request fails.
 */
const getDeleted = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/roots/deleted?limit=${query.limit}&offset=${query.offset}`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get deleted: ${response.statusText}`);
    }
    return response.json();
});
exports.getDeleted = getDeleted;
/**
 * Retrieves the aggregated information of a specific object identified by its CID.
 *
 * This method sends a request to the server to fetch details about the
 * object, including its metadata and other relevant information.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithoutPagination<{ cid: string }>} query - The query parameters containing the CID of the object to retrieve.
 * @returns {Promise<ObjectInformation>} - A promise that resolves to the information of the requested object.
 * @throws {Error} - Throws an error if the request fails.
 */
const getObject = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/${query.cid}`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get object: ${response.statusText}`);
    }
    return response.json();
});
exports.getObject = getObject;
/**
 * Retrieves the upload status of a specific object identified by its CID.
 *
 * This method sends a request to the server to fetch the current upload status
 * of the object, which can indicate whether the upload is pending, completed,
 * or failed.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithoutPagination<{ cid: string }>} query - The query parameters containing the CID of the object whose upload status is to be retrieved.
 * @returns {Promise<ObjectInformation['uploadStatus']>} - A promise that resolves to the upload status of the requested object.
 * @throws {Error} - Throws an error if the request fails.
 */
const getObjectUploadStatus = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/${query.cid}/status`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get object: ${response.statusText}`);
    }
    return response.json();
});
exports.getObjectUploadStatus = getObjectUploadStatus;
/**
 * Retrieves the owners of a specific object identified by its CID.
 *
 * This method sends a request to the server to fetch the list of owners
 * associated with the object. The owners can provide insights into who
 * has access to or control over the object.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithoutPagination<{ cid: string }>} query - The query parameters containing the CID of the object whose owners are to be retrieved.
 * @returns {Promise<ObjectInformation['owners']>} - A promise that resolves to the list of owners of the requested object.
 * @throws {Error} - Throws an error if the request fails.
 */
const getObjectOwners = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/${query.cid}/owners`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get object: ${response.statusText}`);
    }
    return response.json();
});
exports.getObjectOwners = getObjectOwners;
/**
 * Retrieves the metadata of a specific object identified by its CID.
 *
 * This method sends a request to the server to fetch the metadata associated
 * with the object. The metadata can include various details about the object,
 * such as its name, type, size, and other relevant information.
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @param {ArgsWithoutPagination<{ cid: string }>} query - The query parameters containing the CID of the object whose metadata is to be retrieved.
 * @returns {Promise<ObjectInformation['metadata']>} - A promise that resolves to the metadata of the requested object.
 * @throws {Error} - Throws an error if the request fails.
 */
const getObjectMetadata = (api, query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest(`/objects/${query.cid}/metadata`, {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get object: ${response.statusText}`);
    }
    return response.json();
});
exports.getObjectMetadata = getObjectMetadata;
/**
 * Get upload and download limits of the user
 *
 * @param {AutoDriveApi} api - The API instance used to send requests.
 * @returns {Promise<UserInfo>} - A promise that resolves to the user info.
 * @throws {Error} - Throws an error if the request fails.
 */
const getMe = (api) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield api.sendRequest('@me', {
        method: 'GET',
    });
    if (!response.ok) {
        throw new Error(`Failed to get limits: ${response.statusText}`);
    }
    return response.json();
});
exports.getMe = getMe;
