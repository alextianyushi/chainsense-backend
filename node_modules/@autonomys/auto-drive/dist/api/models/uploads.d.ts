import { z } from 'zod';
export declare enum UploadType {
    FILE = "file",
    FOLDER = "folder"
}
export declare enum UploadStatus {
    PENDING = "pending",
    COMPLETED = "completed",
    MIGRATING = "migrating",
    CANCELLED = "cancelled",
    FAILED = "failed"
}
export declare const fileUploadSchema: z.ZodObject<{
    id: z.ZodString;
    rootId: z.ZodString;
    relativeId: z.ZodNullable<z.ZodString>;
    type: z.ZodNativeEnum<typeof UploadType>;
    status: z.ZodNativeEnum<typeof UploadStatus>;
    fileTree: z.ZodNull;
    name: z.ZodString;
    mimeType: z.ZodNullable<z.ZodString>;
    oauthProvider: z.ZodString;
    oauthUserId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: UploadType;
    status: UploadStatus;
    id: string;
    rootId: string;
    relativeId: string | null;
    fileTree: null;
    mimeType: string | null;
    oauthProvider: string;
    oauthUserId: string;
}, {
    name: string;
    type: UploadType;
    status: UploadStatus;
    id: string;
    rootId: string;
    relativeId: string | null;
    fileTree: null;
    mimeType: string | null;
    oauthProvider: string;
    oauthUserId: string;
}>;
export declare enum CompressionAlgorithm {
    ZLIB = "ZLIB"
}
export interface CompressionOptions {
    algorithm: CompressionAlgorithm;
    level?: number;
    chunkSize?: number;
}
export type FileUploadOptions = {
    compression?: CompressionOptions;
    encryption?: EncryptionOptions;
};
export declare enum EncryptionAlgorithm {
    AES_256_GCM = "AES_256_GCM"
}
export interface EncryptionOptions {
    algorithm: EncryptionAlgorithm;
    chunkSize?: number;
}
export type FileUpload = z.infer<typeof fileUploadSchema> & {
    uploadOptions: FileUploadOptions | null;
};
export declare const folderUploadSchema: z.ZodObject<{
    id: z.ZodString;
    rootId: z.ZodString;
    relativeId: z.ZodNullable<z.ZodString>;
    type: z.ZodNativeEnum<typeof UploadType>;
    status: z.ZodNativeEnum<typeof UploadStatus>;
    fileTree: z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"folder">;
        children: z.ZodArray<z.ZodLazy<z.ZodType<import("./folderTree").FolderTree, z.ZodTypeDef, import("./folderTree").FolderTree>>, "many">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "folder";
        children: import("./folderTree").FolderTree[];
        id: string;
    }, {
        name: string;
        type: "folder";
        children: import("./folderTree").FolderTree[];
        id: string;
    }>;
    name: z.ZodString;
    mimeType: z.ZodNull;
    oauthProvider: z.ZodString;
    oauthUserId: z.ZodString;
    uploadOptions: z.ZodNull;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: UploadType;
    status: UploadStatus;
    id: string;
    rootId: string;
    relativeId: string | null;
    fileTree: {
        name: string;
        type: "folder";
        children: import("./folderTree").FolderTree[];
        id: string;
    };
    mimeType: null;
    oauthProvider: string;
    oauthUserId: string;
    uploadOptions: null;
}, {
    name: string;
    type: UploadType;
    status: UploadStatus;
    id: string;
    rootId: string;
    relativeId: string | null;
    fileTree: {
        name: string;
        type: "folder";
        children: import("./folderTree").FolderTree[];
        id: string;
    };
    mimeType: null;
    oauthProvider: string;
    oauthUserId: string;
    uploadOptions: null;
}>;
export type FolderUpload = z.infer<typeof folderUploadSchema>;
export type CompleteUploadResponse = {
    cid: string;
};
export type UploadFileStatus = {
    type: 'file';
    progress: number;
    cid?: string;
};
export type UploadFolderStatus = {
    type: 'folder';
    progress: number;
    cid?: string;
};
export type UploadChunksStatus = {
    uploadBytes: number;
};
//# sourceMappingURL=uploads.d.ts.map