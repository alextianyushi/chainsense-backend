import { z } from 'zod';
export type FolderTreeFolder = {
    name: string;
    type: 'folder';
    children: FolderTree[];
    id: string;
};
export type FolderTreeFile = {
    name: string;
    type: 'file';
    id: string;
};
export type FolderTree = FolderTreeFolder | FolderTreeFile;
export declare const FolderTreeFolderSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodLiteral<"folder">;
    children: z.ZodArray<z.ZodLazy<z.ZodType<FolderTree, z.ZodTypeDef, FolderTree>>, "many">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "folder";
    children: FolderTree[];
    id: string;
}, {
    name: string;
    type: "folder";
    children: FolderTree[];
    id: string;
}>;
export declare const FolderTreeFileSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodLiteral<"file">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "file";
    id: string;
}, {
    name: string;
    type: "file";
    id: string;
}>;
export declare const FolderTreeSchema: z.ZodType<FolderTree>;
export declare const constructFromFileSystemEntries: (entries: string[]) => FolderTree;
export declare const constructFromInput: (input: File[]) => FolderTree;
export declare const constructZipBlobFromTreeAndPaths: (tree: FolderTree, files: Record<string, File>) => Promise<Blob>;
//# sourceMappingURL=folderTree.d.ts.map