"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAutoDriveApi = exports.OAuthProvider = void 0;
var OAuthProvider;
(function (OAuthProvider) {
    OAuthProvider["GOOGLE"] = "google";
    OAuthProvider["DISCORD"] = "discord";
})(OAuthProvider || (exports.OAuthProvider = OAuthProvider = {}));
const createAutoDriveApi = ({ provider = 'apikey', apiKey, url = 'https://demo.auto-drive.autonomys.xyz/api', }) => {
    return {
        sendRequest: (relativeUrl, request, body) => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const headers = new Headers(Object.assign(Object.assign({}, Object.fromEntries(((_a = request.headers) === null || _a === void 0 ? void 0 : _a.entries()) || [])), { 'x-auth-provider': provider, Authorization: `Bearer ${apiKey}` }));
            const fullRequest = Object.assign(Object.assign({}, request), { headers: new Headers(headers), body });
            return fetch(`${url}${relativeUrl}`, fullRequest);
        }),
    };
};
exports.createAutoDriveApi = createAutoDriveApi;
