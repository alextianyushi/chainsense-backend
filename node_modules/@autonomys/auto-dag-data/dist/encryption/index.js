var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import { Crypto } from '@peculiar/webcrypto';
import { EncryptionAlgorithm } from '../metadata/index.js';
import { asyncByChunk } from '../utils/async.js';
export const crypto = typeof window === 'undefined' ? new Crypto() : window.crypto;
export const ENCRYPTING_CHUNK_SIZE = 1024 * 1024;
const IV_SIZE = 16;
const TAG_SIZE = 16;
const ENCRYPTED_CHUNK_SIZE = ENCRYPTING_CHUNK_SIZE + IV_SIZE + TAG_SIZE;
const SALT_SIZE = 32;
export const getKeyFromPassword = (_a) => __awaiter(void 0, [_a], void 0, function* ({ password, salt }) {
    const encoder = new TextEncoder();
    const saltHash = typeof salt === 'string' ? yield crypto.subtle.digest('SHA-256', encoder.encode(salt)) : salt;
    const keyMaterial = yield crypto.subtle.importKey('raw', encoder.encode(password), 'PBKDF2', false, ['deriveBits', 'deriveKey']);
    return crypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt: saltHash,
        iterations: 100000,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt']);
});
export const encryptFile = function (file_1, password_1, _a) {
    return __asyncGenerator(this, arguments, function* (file, password, { chunkSize = ENCRYPTING_CHUNK_SIZE, algorithm }) {
        var _b, e_1, _c, _d;
        if (algorithm !== EncryptionAlgorithm.AES_256_GCM) {
            throw new Error('Unsupported encryption algorithm');
        }
        const salt = crypto.getRandomValues(Buffer.alloc(SALT_SIZE));
        const key = yield __await(getKeyFromPassword({ password, salt }));
        yield yield __await(salt);
        try {
            for (var _e = true, _f = __asyncValues(asyncByChunk(file, chunkSize)), _g; _g = yield __await(_f.next()), _b = _g.done, !_b; _e = true) {
                _d = _g.value;
                _e = false;
                const chunk = _d;
                const iv = crypto.getRandomValues(new Uint8Array(IV_SIZE));
                const encrypted = yield __await(crypto.subtle.encrypt({ name: 'AES-GCM', iv }, key, chunk));
                yield yield __await(Buffer.concat([Buffer.from(iv), Buffer.from(encrypted)]));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_b && (_c = _f.return)) yield __await(_c.call(_f));
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
};
export const decryptFile = function (file_1, password_1, _a) {
    return __asyncGenerator(this, arguments, function* (file, password, { chunkSize = ENCRYPTED_CHUNK_SIZE, algorithm }) {
        var _b, e_2, _c, _d;
        if (algorithm !== EncryptionAlgorithm.AES_256_GCM) {
            throw new Error('Unsupported encryption algorithm');
        }
        let key = undefined;
        let chunks = Buffer.alloc(0);
        try {
            for (var _e = true, file_2 = __asyncValues(file), file_2_1; file_2_1 = yield __await(file_2.next()), _b = file_2_1.done, !_b; _e = true) {
                _d = file_2_1.value;
                _e = false;
                const bufferSlice = _d;
                chunks = Buffer.concat([chunks, bufferSlice]);
                if (chunks.length >= SALT_SIZE && !key) {
                    const salt = chunks.subarray(0, SALT_SIZE);
                    key = yield __await(getKeyFromPassword({ password, salt }));
                    chunks = chunks.subarray(SALT_SIZE);
                }
                while (key && chunks.length >= chunkSize) {
                    const iv = chunks.subarray(0, IV_SIZE);
                    const encryptedChunk = chunks.subarray(IV_SIZE, chunkSize);
                    const decrypted = yield __await(crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, encryptedChunk));
                    chunks = chunks.subarray(chunkSize);
                    yield yield __await(Buffer.from(decrypted));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (!_e && !_b && (_c = file_2.return)) yield __await(_c.call(file_2));
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (key && chunks.length > 0) {
            const iv = chunks.subarray(0, IV_SIZE);
            const chunk = chunks.subarray(IV_SIZE, chunkSize);
            const decrypted = yield __await(crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, chunk));
            yield yield __await(Buffer.from(decrypted));
        }
    });
};
