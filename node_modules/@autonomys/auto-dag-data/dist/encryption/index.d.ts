import { AwaitIterable } from 'interface-store';
import { EncryptionOptions } from '../metadata/index.js';
import type { PickPartial } from '../utils/types.js';
import { PasswordGenerationOptions } from './types.js';
export declare const crypto: globalThis.Crypto;
export declare const ENCRYPTING_CHUNK_SIZE: number;
export declare const getKeyFromPassword: ({ password, salt }: PasswordGenerationOptions) => Promise<CryptoKey>;
export declare const encryptFile: (file: AwaitIterable<Buffer>, password: string, { chunkSize, algorithm }: PickPartial<EncryptionOptions, "algorithm">) => AsyncIterable<Buffer>;
export declare const decryptFile: (file: AwaitIterable<Buffer>, password: string, { chunkSize, algorithm }: PickPartial<EncryptionOptions, "algorithm">) => AsyncIterable<Buffer>;
//# sourceMappingURL=index.d.ts.map