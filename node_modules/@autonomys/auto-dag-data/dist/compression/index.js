var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import { Unzlib, Zlib } from 'fflate';
import { CompressionAlgorithm } from '../metadata/index.js';
import { asyncByChunk } from '../utils/async.js';
export const COMPRESSION_CHUNK_SIZE = 1024 * 1024;
export function compressFile(file_1, _a) {
    return __asyncGenerator(this, arguments, function* compressFile_1(file, { level = 9, chunkSize = COMPRESSION_CHUNK_SIZE, algorithm, }) {
        var _b, e_1, _c, _d;
        if (algorithm !== CompressionAlgorithm.ZLIB) {
            throw new Error('Unsupported compression algorithm');
        }
        if (level < 0 || level > 9) {
            throw new Error('Invalid compression level');
        }
        if (chunkSize <= 0) {
            throw new Error('Invalid chunk size');
        }
        const zlib = new Zlib({ level });
        const compressedChunks = [];
        zlib.ondata = (chunk) => {
            compressedChunks.push(Buffer.from(chunk));
        };
        try {
            for (var _e = true, _f = __asyncValues(asyncByChunk(file, chunkSize)), _g; _g = yield __await(_f.next()), _b = _g.done, !_b; _e = true) {
                _d = _g.value;
                _e = false;
                const chunk = _d;
                zlib.push(chunk, false);
                while (compressedChunks.length > 0) {
                    yield yield __await(compressedChunks.shift());
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_b && (_c = _f.return)) yield __await(_c.call(_f));
            }
            finally { if (e_1) throw e_1.error; }
        }
        zlib.push(new Uint8Array(), true);
        while (compressedChunks.length > 0) {
            yield yield __await(compressedChunks.shift());
        }
    });
}
export function decompressFile(compressedFile_1, _a) {
    return __asyncGenerator(this, arguments, function* decompressFile_1(compressedFile, { chunkSize = COMPRESSION_CHUNK_SIZE, algorithm, level = 9, }) {
        var _b, e_2, _c, _d;
        if (algorithm !== CompressionAlgorithm.ZLIB) {
            throw new Error('Unsupported compression algorithm');
        }
        if (chunkSize <= 0) {
            throw new Error('Invalid chunk size');
        }
        if (level < 0 || level > 9) {
            throw new Error('Invalid compression level');
        }
        const unzlib = new Unzlib();
        const decompressedChunks = [];
        unzlib.ondata = (chunk) => {
            decompressedChunks.push(Buffer.from(chunk));
        };
        try {
            for (var _e = true, _f = __asyncValues(asyncByChunk(compressedFile, chunkSize)), _g; _g = yield __await(_f.next()), _b = _g.done, !_b; _e = true) {
                _d = _g.value;
                _e = false;
                const chunk = _d;
                unzlib.push(chunk, false);
                while (decompressedChunks.length > 0) {
                    yield yield __await(decompressedChunks.shift());
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (!_e && !_b && (_c = _f.return)) yield __await(_c.call(_f));
            }
            finally { if (e_2) throw e_2.error; }
        }
        unzlib.push(new Uint8Array(), true);
        while (decompressedChunks.length > 0) {
            yield yield __await(decompressedChunks.shift());
        }
    });
}
