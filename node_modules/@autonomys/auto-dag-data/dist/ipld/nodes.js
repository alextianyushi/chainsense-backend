import { encodeIPLDNodeData, MetadataType } from '../metadata/onchain/index.js';
import { stringifyMetadata } from '../utils/metadata.js';
import { DEFAULT_NODE_MAX_SIZE, ensureNodeMaxSize } from './chunker.js';
import { createNode } from './index.js';
/// Creates a file chunk ipld node
export const createFileChunkIpldNode = (data, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.FileChunk,
    size: BigInt(data.length).valueOf(),
    linkDepth: 0,
    data,
}), []), maxNodeSize);
// Creates a file ipld node
// links: the CIDs of the file's contents
// @todo: add the file's metadata
export const createChunkedFileIpldNode = (links, size, linkDepth, name, maxNodeSize = DEFAULT_NODE_MAX_SIZE, uploadOptions) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.File,
    name,
    size,
    linkDepth,
    uploadOptions,
}), links.map((cid) => ({ Hash: cid }))), maxNodeSize);
// Creates a file ipld node
// links: the CIDs of the file's contents
export const createFileInlinkIpldNode = (links, size, linkDepth, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.FileInlink,
    size: BigInt(size).valueOf(),
    linkDepth,
}), links.map((cid) => ({ Hash: cid }))), maxNodeSize);
// Creates a file ipld node
// links: the CIDs of the file's contents
// @todo: add the file's metadata
export const createSingleFileIpldNode = (data, name, uploadOptions, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.File,
    name,
    size: BigInt(data.length).valueOf(),
    linkDepth: 0,
    data,
    uploadOptions,
}), []), maxNodeSize);
// Creates a file ipld node
// links: the CIDs of the file's contents
// @todo: add the file's metadata
export const createMetadataInlinkIpldNode = (links, size, linkDepth, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.FileInlink,
    size: BigInt(size).valueOf(),
    linkDepth,
}), links.map((cid) => ({ Hash: cid }))), maxNodeSize);
// Creates a file ipld node
// links: the CIDs of the file's contents
// @todo: add the file's metadata
export const createSingleMetadataIpldNode = (data, name) => createNode(encodeIPLDNodeData({
    type: MetadataType.Metadata,
    name,
    size: BigInt(data.length).valueOf(),
    linkDepth: 0,
    data,
}), []);
export const createMetadataChunkIpldNode = (data, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.MetadataChunk,
    size: BigInt(data.length).valueOf(),
    linkDepth: 0,
    data,
})), maxNodeSize);
export const createChunkedMetadataIpldNode = (links, size, linkDepth, name, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.Metadata,
    name,
    size,
    linkDepth,
}), links.map((cid) => ({ Hash: cid }))), maxNodeSize);
// Creates a folder ipld node
// links: the CIDs of the folder's contents
// @todo: add the folder's metadata
export const createFolderIpldNode = (links, name, linkDepth, size, maxNodeSize = DEFAULT_NODE_MAX_SIZE, uploadOptions) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.Folder,
    name,
    size,
    linkDepth,
    uploadOptions,
}), links.map((cid) => ({ Hash: cid }))), maxNodeSize);
export const createFolderInlinkIpldNode = (links, linkDepth, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => ensureNodeMaxSize(createNode(encodeIPLDNodeData({
    type: MetadataType.FolderInlink,
    linkDepth,
}), links.map((cid) => ({ Hash: cid }))), maxNodeSize);
/// Creates a metadata ipld node
export const createMetadataNode = (metadata, maxNodeSize = DEFAULT_NODE_MAX_SIZE) => {
    const data = Buffer.from(stringifyMetadata(metadata));
    return ensureNodeMaxSize(createNode(encodeIPLDNodeData({
        type: MetadataType.Metadata,
        name: metadata.name,
        linkDepth: 0,
        data,
        size: BigInt(data.length).valueOf(),
    })), maxNodeSize);
};
