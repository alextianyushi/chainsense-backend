import type { BaseBlockstore } from 'blockstore-core';
import type { AwaitIterable } from 'interface-store';
import { CID } from 'multiformats';
import { FileUploadOptions, OffchainMetadata } from '../metadata/index.js';
import { Builders } from './builders.js';
import { PBNode } from './utils.js';
type ChunkerLimits = {
    maxNodeSize: number;
    maxLinkPerNode: number;
};
type ChunkerOptions = ChunkerLimits & FileUploadOptions;
export declare const DEFAULT_NODE_MAX_SIZE = 65535;
export declare const MAX_NAME_SIZE = 255;
export declare const NODE_METADATA_SIZE: number;
export declare const DEFAULT_MAX_CHUNK_SIZE: number;
export declare const LINK_SIZE_IN_BYTES = 40;
export declare const DEFAULT_MAX_LINK_PER_NODE: number;
export declare const processFileToIPLDFormat: (blockstore: BaseBlockstore, file: AwaitIterable<Buffer>, totalSize: bigint, filename?: string, { maxNodeSize, maxLinkPerNode, encryption, compression, }?: Partial<ChunkerOptions>) => Promise<CID>;
export declare const processMetadataToIPLDFormat: (blockstore: BaseBlockstore, metadata: OffchainMetadata, limits?: {
    maxNodeSize: number;
    maxLinkPerNode: number;
}) => Promise<CID>;
export declare const processBufferToIPLDFormatFromChunks: (blockstore: BaseBlockstore, chunks: AwaitIterable<CID>, filename: string | undefined, totalSize: bigint, builders: Builders, { maxNodeSize: maxNodeSize, maxLinkPerNode, encryption, compression, }?: Partial<ChunkerOptions>) => Promise<CID>;
export declare const processFolderToIPLDFormat: (blockstore: BaseBlockstore, children: CID[], name: string, size: bigint, { maxLinkPerNode, maxNodeSize: maxNodeSize, compression, encryption, }?: Partial<ChunkerOptions>) => Promise<CID>;
/**
 * Process chunks to IPLD format, return the last chunk if it's not full
 * @returns the last chunk if it's not full, otherwise an empty buffer
 */
export declare const processChunksToIPLDFormat: (blockstore: BaseBlockstore, chunks: AwaitIterable<Buffer>, builders: Builders, { maxChunkSize }?: {
    maxChunkSize?: number;
}) => Promise<Buffer>;
export declare const ensureNodeMaxSize: (node: PBNode, maxSize?: number) => PBNode;
export {};
//# sourceMappingURL=chunker.d.ts.map