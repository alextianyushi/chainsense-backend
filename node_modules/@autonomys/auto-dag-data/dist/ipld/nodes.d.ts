import { CID } from 'multiformats/cid';
import { FileUploadOptions, OffchainMetadata } from '../metadata/index.js';
import { PBNode } from './index.js';
export declare const createFileChunkIpldNode: (data: Buffer, maxNodeSize?: number) => PBNode;
export declare const createChunkedFileIpldNode: (links: CID[], size: bigint, linkDepth: number, name?: string, maxNodeSize?: number, uploadOptions?: FileUploadOptions) => PBNode;
export declare const createFileInlinkIpldNode: (links: CID[], size: number, linkDepth: number, maxNodeSize?: number) => PBNode;
export declare const createSingleFileIpldNode: (data: Buffer, name?: string, uploadOptions?: FileUploadOptions, maxNodeSize?: number) => PBNode;
export declare const createMetadataInlinkIpldNode: (links: CID[], size: number, linkDepth: number, maxNodeSize?: number) => PBNode;
export declare const createSingleMetadataIpldNode: (data: Buffer, name?: string) => PBNode;
export declare const createMetadataChunkIpldNode: (data: Buffer, maxNodeSize?: number) => PBNode;
export declare const createChunkedMetadataIpldNode: (links: CID[], size: bigint, linkDepth: number, name?: string, maxNodeSize?: number) => PBNode;
export declare const createFolderIpldNode: (links: CID[], name: string, linkDepth: number, size: bigint, maxNodeSize?: number, uploadOptions?: FileUploadOptions) => PBNode;
export declare const createFolderInlinkIpldNode: (links: CID[], linkDepth: number, maxNodeSize?: number) => PBNode;
export declare const createMetadataNode: (metadata: OffchainMetadata, maxNodeSize?: number) => PBNode;
//# sourceMappingURL=nodes.d.ts.map