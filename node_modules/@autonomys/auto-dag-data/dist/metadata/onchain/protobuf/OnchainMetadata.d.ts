import { type Codec, type DecodeOptions } from 'protons-runtime';
import type { Uint8ArrayList } from 'uint8arraylist';
export interface IPLDNodeData {
    type: MetadataType;
    linkDepth: number;
    size?: bigint;
    name?: string;
    data?: Uint8Array;
    uploadOptions?: FileUploadOptions;
}
export declare namespace IPLDNodeData {
    const codec: () => Codec<IPLDNodeData>;
    const encode: (obj: Partial<IPLDNodeData>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<IPLDNodeData>) => IPLDNodeData;
}
export declare enum MetadataType {
    File = "File",
    FileInlink = "FileInlink",
    FileChunk = "FileChunk",
    Folder = "Folder",
    FolderInlink = "FolderInlink",
    Metadata = "Metadata",
    MetadataInlink = "MetadataInlink",
    MetadataChunk = "MetadataChunk"
}
export declare namespace MetadataType {
    const codec: () => Codec<MetadataType>;
}
export interface FileUploadOptions {
    compression?: CompressionOptions;
    encryption?: EncryptionOptions;
}
export declare namespace FileUploadOptions {
    const codec: () => Codec<FileUploadOptions>;
    const encode: (obj: Partial<FileUploadOptions>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<FileUploadOptions>) => FileUploadOptions;
}
export interface CompressionOptions {
    algorithm: CompressionAlgorithm;
    level?: number;
    chunkSize?: number;
}
export declare namespace CompressionOptions {
    const codec: () => Codec<CompressionOptions>;
    const encode: (obj: Partial<CompressionOptions>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<CompressionOptions>) => CompressionOptions;
}
export interface EncryptionOptions {
    algorithm: EncryptionAlgorithm;
    chunkSize?: number;
}
export declare namespace EncryptionOptions {
    const codec: () => Codec<EncryptionOptions>;
    const encode: (obj: Partial<EncryptionOptions>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<EncryptionOptions>) => EncryptionOptions;
}
export declare enum CompressionAlgorithm {
    ZLIB = "ZLIB"
}
export declare namespace CompressionAlgorithm {
    const codec: () => Codec<CompressionAlgorithm>;
}
export declare enum EncryptionAlgorithm {
    AES_256_GCM = "AES_256_GCM"
}
export declare namespace EncryptionAlgorithm {
    const codec: () => Codec<EncryptionAlgorithm>;
}
//# sourceMappingURL=OnchainMetadata.d.ts.map