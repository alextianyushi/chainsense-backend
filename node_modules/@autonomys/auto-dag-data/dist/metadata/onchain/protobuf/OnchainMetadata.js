/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { decodeMessage, encodeMessage, enumeration, message } from 'protons-runtime';
export var IPLDNodeData;
(function (IPLDNodeData) {
    let _codec;
    IPLDNodeData.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.type != null && __MetadataTypeValues[obj.type] !== 0) {
                    w.uint32(8);
                    MetadataType.codec().encode(obj.type, w);
                }
                if ((obj.linkDepth != null && obj.linkDepth !== 0)) {
                    w.uint32(16);
                    w.int32(obj.linkDepth);
                }
                if (obj.size != null) {
                    w.uint32(24);
                    w.int64(obj.size);
                }
                if (obj.name != null) {
                    w.uint32(34);
                    w.string(obj.name);
                }
                if (obj.data != null) {
                    w.uint32(42);
                    w.bytes(obj.data);
                }
                if (obj.uploadOptions != null) {
                    w.uint32(50);
                    FileUploadOptions.codec().encode(obj.uploadOptions, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                var _a;
                const obj = {
                    type: MetadataType.File,
                    linkDepth: 0
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.type = MetadataType.codec().decode(reader);
                            break;
                        }
                        case 2: {
                            obj.linkDepth = reader.int32();
                            break;
                        }
                        case 3: {
                            obj.size = reader.int64();
                            break;
                        }
                        case 4: {
                            obj.name = reader.string();
                            break;
                        }
                        case 5: {
                            obj.data = reader.bytes();
                            break;
                        }
                        case 6: {
                            obj.uploadOptions = FileUploadOptions.codec().decode(reader, reader.uint32(), {
                                limits: (_a = opts.limits) === null || _a === void 0 ? void 0 : _a.uploadOptions
                            });
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    IPLDNodeData.encode = (obj) => {
        return encodeMessage(obj, IPLDNodeData.codec());
    };
    IPLDNodeData.decode = (buf, opts) => {
        return decodeMessage(buf, IPLDNodeData.codec(), opts);
    };
})(IPLDNodeData || (IPLDNodeData = {}));
export var MetadataType;
(function (MetadataType) {
    MetadataType["File"] = "File";
    MetadataType["FileInlink"] = "FileInlink";
    MetadataType["FileChunk"] = "FileChunk";
    MetadataType["Folder"] = "Folder";
    MetadataType["FolderInlink"] = "FolderInlink";
    MetadataType["Metadata"] = "Metadata";
    MetadataType["MetadataInlink"] = "MetadataInlink";
    MetadataType["MetadataChunk"] = "MetadataChunk";
})(MetadataType || (MetadataType = {}));
var __MetadataTypeValues;
(function (__MetadataTypeValues) {
    __MetadataTypeValues[__MetadataTypeValues["File"] = 0] = "File";
    __MetadataTypeValues[__MetadataTypeValues["FileInlink"] = 1] = "FileInlink";
    __MetadataTypeValues[__MetadataTypeValues["FileChunk"] = 2] = "FileChunk";
    __MetadataTypeValues[__MetadataTypeValues["Folder"] = 3] = "Folder";
    __MetadataTypeValues[__MetadataTypeValues["FolderInlink"] = 4] = "FolderInlink";
    __MetadataTypeValues[__MetadataTypeValues["Metadata"] = 5] = "Metadata";
    __MetadataTypeValues[__MetadataTypeValues["MetadataInlink"] = 6] = "MetadataInlink";
    __MetadataTypeValues[__MetadataTypeValues["MetadataChunk"] = 7] = "MetadataChunk";
})(__MetadataTypeValues || (__MetadataTypeValues = {}));
(function (MetadataType) {
    MetadataType.codec = () => {
        return enumeration(__MetadataTypeValues);
    };
})(MetadataType || (MetadataType = {}));
export var FileUploadOptions;
(function (FileUploadOptions) {
    let _codec;
    FileUploadOptions.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.compression != null) {
                    w.uint32(10);
                    CompressionOptions.codec().encode(obj.compression, w);
                }
                if (obj.encryption != null) {
                    w.uint32(18);
                    EncryptionOptions.codec().encode(obj.encryption, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                var _a, _b;
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.compression = CompressionOptions.codec().decode(reader, reader.uint32(), {
                                limits: (_a = opts.limits) === null || _a === void 0 ? void 0 : _a.compression
                            });
                            break;
                        }
                        case 2: {
                            obj.encryption = EncryptionOptions.codec().decode(reader, reader.uint32(), {
                                limits: (_b = opts.limits) === null || _b === void 0 ? void 0 : _b.encryption
                            });
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    FileUploadOptions.encode = (obj) => {
        return encodeMessage(obj, FileUploadOptions.codec());
    };
    FileUploadOptions.decode = (buf, opts) => {
        return decodeMessage(buf, FileUploadOptions.codec(), opts);
    };
})(FileUploadOptions || (FileUploadOptions = {}));
export var CompressionOptions;
(function (CompressionOptions) {
    let _codec;
    CompressionOptions.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.algorithm != null && __CompressionAlgorithmValues[obj.algorithm] !== 0) {
                    w.uint32(8);
                    CompressionAlgorithm.codec().encode(obj.algorithm, w);
                }
                if (obj.level != null) {
                    w.uint32(16);
                    w.int32(obj.level);
                }
                if (obj.chunkSize != null) {
                    w.uint32(24);
                    w.int32(obj.chunkSize);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    algorithm: CompressionAlgorithm.ZLIB
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.algorithm = CompressionAlgorithm.codec().decode(reader);
                            break;
                        }
                        case 2: {
                            obj.level = reader.int32();
                            break;
                        }
                        case 3: {
                            obj.chunkSize = reader.int32();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    CompressionOptions.encode = (obj) => {
        return encodeMessage(obj, CompressionOptions.codec());
    };
    CompressionOptions.decode = (buf, opts) => {
        return decodeMessage(buf, CompressionOptions.codec(), opts);
    };
})(CompressionOptions || (CompressionOptions = {}));
export var EncryptionOptions;
(function (EncryptionOptions) {
    let _codec;
    EncryptionOptions.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.algorithm != null && __EncryptionAlgorithmValues[obj.algorithm] !== 0) {
                    w.uint32(8);
                    EncryptionAlgorithm.codec().encode(obj.algorithm, w);
                }
                if (obj.chunkSize != null) {
                    w.uint32(16);
                    w.int32(obj.chunkSize);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length, opts = {}) => {
                const obj = {
                    algorithm: EncryptionAlgorithm.AES_256_GCM
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1: {
                            obj.algorithm = EncryptionAlgorithm.codec().decode(reader);
                            break;
                        }
                        case 2: {
                            obj.chunkSize = reader.int32();
                            break;
                        }
                        default: {
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    EncryptionOptions.encode = (obj) => {
        return encodeMessage(obj, EncryptionOptions.codec());
    };
    EncryptionOptions.decode = (buf, opts) => {
        return decodeMessage(buf, EncryptionOptions.codec(), opts);
    };
})(EncryptionOptions || (EncryptionOptions = {}));
export var CompressionAlgorithm;
(function (CompressionAlgorithm) {
    CompressionAlgorithm["ZLIB"] = "ZLIB";
})(CompressionAlgorithm || (CompressionAlgorithm = {}));
var __CompressionAlgorithmValues;
(function (__CompressionAlgorithmValues) {
    __CompressionAlgorithmValues[__CompressionAlgorithmValues["ZLIB"] = 0] = "ZLIB";
})(__CompressionAlgorithmValues || (__CompressionAlgorithmValues = {}));
(function (CompressionAlgorithm) {
    CompressionAlgorithm.codec = () => {
        return enumeration(__CompressionAlgorithmValues);
    };
})(CompressionAlgorithm || (CompressionAlgorithm = {}));
export var EncryptionAlgorithm;
(function (EncryptionAlgorithm) {
    EncryptionAlgorithm["AES_256_GCM"] = "AES_256_GCM";
})(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
var __EncryptionAlgorithmValues;
(function (__EncryptionAlgorithmValues) {
    __EncryptionAlgorithmValues[__EncryptionAlgorithmValues["AES_256_GCM"] = 0] = "AES_256_GCM";
})(__EncryptionAlgorithmValues || (__EncryptionAlgorithmValues = {}));
(function (EncryptionAlgorithm) {
    EncryptionAlgorithm.codec = () => {
        return enumeration(__EncryptionAlgorithmValues);
    };
})(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
